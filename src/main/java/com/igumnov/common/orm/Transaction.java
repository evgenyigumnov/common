package com.igumnov.common.orm;


import com.igumnov.common.Reflection;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.sql.*;
import java.util.*;

public class Transaction {
    private Connection connection;

    public Transaction(Connection c) throws SQLException {
        connection = c;
        c.setAutoCommit(false);

    }

    public Object update(Object obj) {
        return null;
    }

    public void commit() throws SQLException {
        try {
            connection.commit();
        } finally {
            try {
                connection.setAutoCommit(false);
            } finally {
                connection.close();
            }
        }
    }

    public void rollback() throws SQLException {
        try {
            connection.rollback();
        } finally {
            try {
                connection.setAutoCommit(false);
            } finally {
                connection.close();
            }
        }
    }


    public Object insert(Object obj) throws IllegalAccessException, SQLException {

        LinkedHashMap<String, Object> fields = new LinkedHashMap<String, Object>();
        boolean autoGenerated = false;
        String autoGeneratedField=null;
        for (Field field : obj.getClass().getDeclaredFields()) {
            boolean noAnnotation = true;
            for (Annotation annotation : field.getDeclaredAnnotations())
                if (annotation.annotationType().equals(Id.class)) {
                    Boolean autoIncremental = ((Id) annotation).autoIncremental();
                    if (!autoIncremental) {
                        noAnnotation = false;
                        autoGenerated = true;
                        autoGeneratedField = field.getName();
                    }
                }

            if (noAnnotation) {
                field.setAccessible(true);
                fields.put(field.getName(), field.get(obj));
            }
        }

        String names = "";
        String values = "";
        Set<String> fieldsSet = fields.keySet();
        Iterator<String> it = fieldsSet.iterator();

        // TODO Replace to StringBuffer
        while (it.hasNext()) {
            if (names.length() != 0) {
                names = names + ",";
            }
            names = names + it.next();

            if (values.length() != 0) {
                values = values + "," ;
            }
            values = values + "?";

        }

        String sql = "insert into " + obj.getClass().getSimpleName().toLowerCase() + "(" + names + ") values (" + values + ")";
        PreparedStatement preparedStatement = null;
        try {
            if(!autoGenerated) {
                preparedStatement = connection.prepareStatement(sql);
            } else {
                preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            }


            it = fieldsSet.iterator();
            int i = 1;
            while (it.hasNext()) {
                preparedStatement.setObject(i, fields.get(it.next()));
                ++i;
            }
            preparedStatement.executeUpdate();

            if(autoGenerated) {
                ResultSet tableKeys = preparedStatement.getGeneratedKeys();
                tableKeys.next();
                Object autoGeneratedID = tableKeys.getObject(1);
                Reflection.setField(obj, autoGeneratedField, autoGeneratedID);
            }
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                }
            } catch (Exception e) {
            }
        }
        // TODO Add autoincrement id to object
        return obj;
    }
}
